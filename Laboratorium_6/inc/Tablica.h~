#ifndef TABLICA_H
#define TABLICA_H
#define ROZMIAR 256

/*!
 * \file
 * \brief Definicja szablonu klasy Tablica.
 *
 * Plik zawiera definicję szablonu klasy Tablica.
*/
#include "Wpis.h"
#include <iostream>
#include <string>

/*!
* \brief Modeluje pojęcie Tablica.
* Klasa modeluje pojęcie Tablica asocjacyjna .
* Jej atrybutem są pola: klucz i wartość.
*/
template <typename K, typename V>
class Tablica 
{
public:
   // Pola
/*!
 *  \brief Pomocnicza zmienna statyczna.
 */
   static int zmienna;
   
   // Metody
/*!
 *  \brief Wykorzystuje pola z klasy Wpis.
 */
   Wpis<K,V> Tablica[ROZMIAR];
/*!
 *  \brief Dodaje jeden rekord, czyli wartość i klucz.
 *  
 */
   void Dodaj(Wpis<K,V> para);
/*!
 *  \brief Usuwa klucz.
 */
   void Usun(K key);
/*!
 *  \brief Pobiera klucz.
 *  /return Zwraca zmienna o nazwie wartosc.
 */
   V Pobierz (K key);
/*!
  *  \brief Sprawdza zawartość tablicy.
  *  
  * Metoda porównuje zmienną i zwraca true, jeśli zmienna jest równa 0
  */
   bool IsEmpty()
   {
      return zmienna == 0;
   }
/*!
 * \brief Zwraca rozmiar.
 * 
 * Zwraca zmienna stat.
 */
   int Size()
   {
      return zmienna;
   }
/*!
 * \brief Przeciążenie operatora indeksującego.
 *
 * Zwraca wartość.
 */
   V& operator[](K key);
/*!
 *  \brief Funkcja haszująca dla obiektów typu string.
 */
   int Hash_String(string key)const 
   {
    	unsigned int h=key[0];
    	for (unsigned int i=0; i< key.size();i++)
	 h = (h << 4) + key[i];
    	return h % ROZMIAR;
    }
};

template<typename K , typename V>
void Tablica<K,V>::Dodaj(Wpis<K,V> wpis)
{
   int pozycja = Hash_String(wpis.key);
   Tab[pozycja] = wpis;
   zmienna++;
}


template<typename K , typename V>
void Tablica<K,V>::Usun(K key)
{
   int pozycja = Hash_String(key);
   Tab[pozycja].wart=NULL;
   zmienna--;
}

template<typename K , typename V>
V Tablica<K,V>::Pobierz(K key)
{
   int pozycja = Hash_String(key);
   return *Tab[pozycja].wart;
}

template <typename K, typename V>
V& Tablica<K,V>::operator[]( K key)
{
   int hash = Hash_String(key);
   if (Tab[hash].key == key)
      return *Tab[hash].wart;
   Tab[hash].key = key;
   Tab[hash].wart = new V;
   *Tab[hash].wart = 0;
   return *Tab[hash].wart;
}

#endif